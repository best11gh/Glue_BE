name: CD

on:
  push:
    branches: [ release ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # application.yml은 Github Secret에 올리기
      - name: Generate application.yml
        env:
          APP_CONFIG: ${{ secrets.APPLICATION_YML }}
        run: |
          echo "$APP_CONFIG" > src/main/resources/application.yml

      - name: Restore Firebase Key file
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
        run: |
          mkdir -p src/main/resources/firebase
          printf '%s\n' "$FIREBASE_KEY" > src/main/resources/firebase/serviceAccountKey.json

      - name: Restore Apple Key file
        env:
          APPLE_LOGIN_AUTH_KEY: ${{ secrets.APPLE_LOGIN_AUTH_KEY }}
        run: |
          mkdir -p src/main/resources/key
          printf '%s\n' "$APPLE_LOGIN_AUTH_KEY" > src/main/resources/key/AuthKey_F4FRHB4D7Y.p8
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            BACKUP_DIR=/home/ec2-user/db_backups
            mkdir -p $BACKUP_DIR

            CONTAINER_ID=$(docker ps -q --filter "name=glue-be")

            if [ -n "$CONTAINER_ID" ] && docker exec $CONTAINER_ID test -f /app/data/mydb.db; then
              echo "Backing up current DB to $BACKUP_DIR/mydb.db"
              # 컨테이너에서 바로 복사 (덮어쓰기)
              docker cp $CONTAINER_ID:/app/data/mydb.db \
                $BACKUP_DIR/mydb.db
            else
              echo "⚠️ No DB file found in container, skipping backup"
            fi

            # 기존 컨테이너 중지/삭제
            if [ -n "$CONTAINER_ID" ]; then
              docker stop $CONTAINER_ID
              docker rm   $CONTAINER_ID
            fi
            docker rm -f glue-be || true

            # 최신 이미지 풀 및 재배포 (호스트 볼륨 마운트)
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest
            docker run -d \
              --name glue-be \
              --network redis-network \
              -p 8080:8080 \
              -v /home/ec2-user/sqlite:/app/data \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e REDIS_HOST=redis-server \
              ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest
