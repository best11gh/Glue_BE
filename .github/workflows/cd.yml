name: CD

on:
  push:
    branches: [ feature/DBmodify ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # application.yml은 GitHub Secret에 저장된 값으로 생성
      - name: Generate application.yml
        env:
          APP_CONFIG: ${{ secrets.APPLICATION_YML }}
        run: |
          echo "$APP_CONFIG" > src/main/resources/application.yml

      - name: Restore Firebase Key file
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
        run: |
          mkdir -p src/main/resources/firebase
          printf '%s\n' "$FIREBASE_KEY" > src/main/resources/firebase/serviceAccountKey.json

      - name: Restore Apple Key file
        env:
          APPLE_LOGIN_AUTH_KEY: ${{ secrets.APPLE_LOGIN_AUTH_KEY }}
        run: |
          mkdir -p src/main/resources/key
          printf '%s\n' "$APPLE_LOGIN_AUTH_KEY" > src/main/resources/key/AuthKey_HVFN44Q8BC.p8

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/glue-be:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/glue-deploy
      
            # 1) was 컨테이너가 실행 중이면 중지
            docker-compose stop was || true
      
            # 2) was 컨테이너를 완전히 삭제(포트 해제 포함)
            docker-compose rm -f was || true
      
            # 3) was 이미지 최신 버전으로 내려받기
            docker-compose pull was
      
            # 4) was 컨테이너를 백그라운드로 기동
            docker-compose up -d was
      
            echo "WAS redeployed via docker-compose"
